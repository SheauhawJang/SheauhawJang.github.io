<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>孤星捧月</title>
  
  <subtitle>Sheauhaw Jang&#39;s Blog</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-08-14T13:00:23.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Sheauhaw Jang</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>模 $p$ 同余类模板</title>
    <link href="http://yoursite.com/2020/08/14/Modulo%20p%20Module/"/>
    <id>http://yoursite.com/2020/08/14/Modulo%20p%20Module/</id>
    <published>2020-08-14T13:00:23.000Z</published>
    <updated>2020-08-14T13:00:23.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模-p-同余类模板"><a href="#模-p-同余类模板" class="headerlink" title="模 $p$ 同余类模板"></a>模 $p$ 同余类模板</h1><h3 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h3><blockquote><p>请输出对 $p$ 取模后的结果.</p></blockquote><blockquote><p>请输出模 $p$ 意义下的结果.</p></blockquote><blockquote><p>最终答案可以表示为 $a/b$, 请输出 $a\cdot b^{-1}\bmod p$, 其中 $b^{-1}$ 是 $b$ 对模 $p$ 的乘法逆元.</p></blockquote><p>在我们做题的时候, 经常会遇到输出在模 $p$ 意义下的结果的题目. 上面三种是经典的这种要求的说法.</p><h3 id="传统做法"><a href="#传统做法" class="headerlink" title="传统做法"></a>传统做法</h3><p>这种题目在计算的过程中, 需要用到大量的取模运算. 原则上, 每进行一次加减乘除的运算, 都需要进行至少一次取模. 在读入一个变量后, 也应该立即进行至少一次取模. 如果结果产生了负数, 则可能需要再进行一次取模来避免这种情况的发生. 例如:</p><blockquote><p>计算 $(a+b)\bmod p$. $-2^{63}&lt;a,b&lt;2^{63}$, $1&lt;p&lt;2^{62}$.</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll a, b, p;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;a, &amp;b, &amp;p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld"</span>, ((a % p + b % p) % p + p) % p);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意到, 这个简单的程序进行了 4 次了取模. 这样产生了一些问题:</p><p>在这个程序中, 每一步取模都是缺一不可的. 对 $a,b$ 的取模是防止 $a+b$ 过大; 对和取模是题目要求; 最后对取模后的结果在加上一个 $p$ 后取模是为了防止直接取模得到负数. 上述四个取模缺少任意一个没有替代品的取模, 都会导致答案的错误. 而在做题的过程中, 上述的取模运算或替代品都是机械化而重复的, 有代码复用的可能; 同时, 这些运算缺一不可, 而在赛场考场上做题时, 在大面积的取模过程中, 可能一时疏忽漏掉某个取模, 导致算法正确的程序出现 <strong><font color=#ff0000#>Wrong Answer</font></strong> 的情况, 这种错误又很难查验, 因此高效便捷的代码复用很有必要.</p><p>而且, 取模运算速度较慢, 应该减少模运算的使用: 在某些情况下利用 if-else 结构或三目运算符 <code>?:</code> 来作为直接偷懒使用取模符号的替代品. 然而, 这些替代品虽然增加了效率, 但是却让代码更加反直觉, 编写更为复杂, 大量重复出现不利于赛场考场的应用. 代码复用就可以令这些问题迎刃而解.</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><p>题面固定模数 $p$ 情况的实现, 这也是最常见的一种情况.</p><p>如果 $p$ 是通过键盘输入, 且对于一组数据, 输入后不再改变, 则只需将类声明中的 <code>static const int</code> 类型的常量的声明作为全程序的全局变量即可. 但是对变量取模会显著地比对常量取模更慢.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for (int i = 0; i &lt; n; ++i)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">llp</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">int</span> v;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">llp</span>(<span class="title">T</span> <span class="title">a</span>, <span class="title">int</span>) &#123;</span> v = a; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> p = <span class="number">998244353</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> phi = p - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> invp = phi - <span class="number">1</span>;</span><br><span class="line">    llp() &#123; v = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">static</span> <span class="title">T</span> <span class="title">mod</span>(<span class="title">T</span> <span class="title">a</span>) &#123;</span> <span class="keyword">return</span> a %= p, a &gt;= <span class="number">0</span> ? a : a + p; &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">static</span> <span class="title">T</span> &amp;<span class="title">opmod</span>(<span class="title">T</span> &amp;<span class="title">a</span>) &#123;</span> <span class="keyword">return</span> a = mod(a); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">llp</span>(<span class="title">T</span> <span class="title">a</span>) &#123;</span> v = mod(a); &#125;</span><br><span class="line">    <span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class">    <span class="title">explicit</span> <span class="title">operator</span> <span class="title">T</span>() <span class="title">const</span> &#123;</span> <span class="keyword">return</span> v; &#125;</span><br><span class="line">    <span class="keyword">int</span> <span class="keyword">operator</span>*() <span class="keyword">const</span> &#123; <span class="keyword">return</span> v; &#125;</span><br><span class="line">    <span class="keyword">int</span> *<span class="keyword">operator</span>&amp;() <span class="keyword">const</span> &#123; <span class="keyword">return</span> (<span class="keyword">int</span> *)&amp;v; &#125;</span><br><span class="line">    <span class="keyword">friend</span> istream &amp;<span class="keyword">operator</span>&gt;&gt;(istream &amp;ipt, llp &amp;x) &#123; <span class="keyword">return</span> ipt &gt;&gt; x.v, opmod(x.v), ipt; &#125;</span><br><span class="line">    <span class="keyword">friend</span> ostream &amp;<span class="keyword">operator</span>&lt;&lt;(ostream &amp;opt, llp x) &#123; <span class="keyword">return</span> opt &lt;&lt; x.v; &#125;</span><br><span class="line">    llp <span class="keyword">operator</span>+(llp b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v + b.v &gt;= p ? llp(v + b.v - p, <span class="number">0</span>) : llp(v + b.v, <span class="number">0</span>); &#125;</span><br><span class="line">    <span class="keyword">friend</span> llp <span class="keyword">operator</span>+(ll a, llp b) &#123; <span class="keyword">return</span> b + a; &#125;</span><br><span class="line">    llp &amp;<span class="keyword">operator</span>+=(llp b) &#123; <span class="keyword">return</span> v += b.v, v = v &gt;= p ? v - p : v, *<span class="keyword">this</span>; &#125;</span><br><span class="line">    llp &amp;<span class="keyword">operator</span>++() &#123; <span class="keyword">return</span> *<span class="keyword">this</span> += <span class="number">1</span>; &#125;</span><br><span class="line">    llp <span class="keyword">operator</span>++(<span class="keyword">int</span>) &#123; <span class="keyword">return</span> ++*<span class="keyword">this</span>, *<span class="keyword">this</span> - <span class="number">1</span>; &#125;</span><br><span class="line">    llp <span class="keyword">operator</span>-() <span class="keyword">const</span> &#123; <span class="keyword">return</span> v ? llp(p - v, <span class="number">0</span>) : llp(); &#125;</span><br><span class="line">    llp <span class="keyword">operator</span>-(llp b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> *<span class="keyword">this</span> + (-b); &#125;</span><br><span class="line">    <span class="keyword">friend</span> llp <span class="keyword">operator</span>-(ll a, llp b) &#123; <span class="keyword">return</span> -b + a; &#125;</span><br><span class="line">    llp &amp;<span class="keyword">operator</span>-=(llp b) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> += -b; &#125;</span><br><span class="line">    llp &amp;<span class="keyword">operator</span>--() &#123; <span class="keyword">return</span> *<span class="keyword">this</span> -= <span class="number">1</span>; &#125;</span><br><span class="line">    llp <span class="keyword">operator</span>--(<span class="keyword">int</span>) &#123; <span class="keyword">return</span> --*<span class="keyword">this</span>, *<span class="keyword">this</span> + <span class="number">1</span>; &#125;</span><br><span class="line">    llp <span class="keyword">operator</span>*(llp b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> ll(v) * b.v; &#125;</span><br><span class="line">    <span class="keyword">friend</span> llp <span class="keyword">operator</span>*(ll a, llp b) &#123; <span class="keyword">return</span> b * a; &#125;</span><br><span class="line">    llp &amp;<span class="keyword">operator</span>*=(llp b) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> * b; &#125;</span><br><span class="line">    llp <span class="keyword">operator</span>[](ll b) <span class="keyword">const</span></span><br><span class="line">    &#123;</span><br><span class="line">        llp ans = <span class="number">1</span>, a = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">while</span> (b)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (b &amp; <span class="number">1</span>)</span><br><span class="line">                ans *= a;</span><br><span class="line">            a *= a, b &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    llp <span class="keyword">operator</span>^(ll b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> (*<span class="keyword">this</span>)[b]; &#125;</span><br><span class="line">    llp &amp;<span class="keyword">operator</span>^=(ll b) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> ^ b; &#125;</span><br><span class="line">    llp <span class="keyword">operator</span>~() <span class="keyword">const</span> &#123; <span class="keyword">return</span> *<span class="keyword">this</span> ^ invp; &#125;</span><br><span class="line">    llp <span class="keyword">operator</span>/(llp b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> *<span class="keyword">this</span> * ~b; &#125;</span><br><span class="line">    <span class="keyword">friend</span> llp <span class="keyword">operator</span>/(ll a, llp b) &#123; <span class="keyword">return</span> (~b) * a; &#125;</span><br><span class="line">    llp &amp;<span class="keyword">operator</span>/=(llp b) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> / b; &#125;</span><br><span class="line">    llp <span class="keyword">operator</span>&lt;&lt;(<span class="keyword">int</span> b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> *<span class="keyword">this</span> * llp(<span class="number">2</span>)[b]; &#125;</span><br><span class="line">    llp &amp;<span class="keyword">operator</span>&lt;&lt;=(<span class="keyword">int</span> b) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> &lt;&lt; b; &#125;</span><br><span class="line">    llp <span class="keyword">operator</span>&gt;&gt;(<span class="keyword">int</span> b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> *<span class="keyword">this</span> / llp(<span class="number">2</span>)[b]; &#125;</span><br><span class="line">    llp &amp;<span class="keyword">operator</span>&gt;&gt;=(<span class="keyword">int</span> b) &#123; <span class="keyword">return</span> *<span class="keyword">this</span> = *<span class="keyword">this</span> &gt;&gt; b; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(ll b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> mod(b) == v; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(llp b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v == b.v; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(ll b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> == b); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>!=(llp b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> == b); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(llp b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt; b.v; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;=(llp b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt;= b.v; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;(llp b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt; b.v; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&gt;=(llp b) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt;= b.v; &#125;</span><br><span class="line">    <span class="keyword">friend</span> llp <span class="keyword">operator</span>&lt;(ll a, llp b) &#123; <span class="keyword">return</span> b &gt; a; &#125;</span><br><span class="line">    <span class="keyword">friend</span> llp <span class="keyword">operator</span>&lt;=(ll a, llp b) &#123; <span class="keyword">return</span> b &gt;= a; &#125;</span><br><span class="line">    <span class="keyword">friend</span> llp <span class="keyword">operator</span>&gt;(ll a, llp b) &#123; <span class="keyword">return</span> b &lt; a; &#125;</span><br><span class="line">    <span class="keyword">friend</span> llp <span class="keyword">operator</span>&gt;=(ll a, llp b) &#123; <span class="keyword">return</span> b &lt;= a; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">var</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> v; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">mod</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> p; &#125;</span><br><span class="line">    <span class="function">llp <span class="title">sqd</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> *<span class="keyword">this</span> * *<span class="keyword">this</span>; &#125;</span><br><span class="line">    <span class="function">llp <span class="title">inv</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> ~*<span class="keyword">this</span>; &#125;</span><br><span class="line">    <span class="function">llp <span class="title">pow</span><span class="params">(ll b)</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> *<span class="keyword">this</span> ^ b; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;模-p-同余类模板&quot;&gt;&lt;a href=&quot;#模-p-同余类模板&quot; class=&quot;headerlink&quot; title=&quot;模 $p$ 同余类模板&quot;&gt;&lt;/a&gt;模 $p$ 同余类模板&lt;/h1&gt;&lt;h3 id=&quot;问题引入&quot;&gt;&lt;a href=&quot;#问题引入&quot; class=&quot;head</summary>
      
    
    
    
    
    <category term="ICPC" scheme="http://yoursite.com/tags/ICPC/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/12/11/hello-world/"/>
    <id>http://yoursite.com/2019/12/11/hello-world/</id>
    <published>2019-12-11T13:11:47.000Z</published>
    <updated>2019-12-11T13:11:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.</summary>
      
    
    
    
    
  </entry>
  
</feed>
